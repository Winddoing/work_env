"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
">>>>>> gvim configure
if has("win32")
    " set the menu & the message to English
    set langmenu=en_US
    let $LANG= 'en_US'
	if has("gui_running")
        " 窗口大小
        "set lines=35 columns=140
	    " 窗口最大化
	    autocmd GUIEnter * simalt ~x

        "不显示工具/菜单栏
        set guioptions-=T
        set guioptions-=m
	endif

    " Normal模式自动切换至英文输入法
    set noimdisable
endif
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"" => 鼠标模式
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set mouse=a
set mouse=n
set mouse=i
set mouse=c
set mouse=h
set mouse=n
"set mouse=v


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"" => 主题颜色
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set t_Co=256
"colorscheme morning
colorscheme molokai
"colorscheme darkblue


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"" => Fn 快捷键
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"F1 for uncomment
"Vim help
nnoremap <F1> :vertical botright help<CR>

"F6 for uncomment
vmap <F6> :s=^\(//\)*==g<cr>:noh<cr>
nmap <F6> :s=^\(//\)*==g<cr>:noh<cr>
imap <F6> <ESC>:s=^\(//\)*==g<cr>:noh<cr>

"F7 for uncomment
vmap <F7> :s=^\(//\)*=//=g<cr>:noh<cr>
nmap <F7> :s=^\(//\)*=//=g<cr>:noh<cr>
imap <F7> <ESC>:s=^\(//\)*=//=g<cr>:noh<cr>

vmap <F7># :s=^\(#\)*=#=g<cr>:noh<cr>
nmap <F7># :s=^\(#\)*=#=g<cr>:noh<cr>
imap <F7># <ESC>:s=^\(#\)*=#=g<cr>:noh<cr>

"F12 for uncomment
vmap <F12> :s=^\(//\)*=/*=g<cr>:s=\(//\)*$=*/=g<cr>:noh<cr>
nmap <F12> :s=^\(//\)*=/*=g<cr>:s=\(//\)*$=*/=g<cr>:noh<cr>
imap <F12> <ESC>:s=^\(//\)*=/*=g<cr>:s=\(//\)*$=*/=g<cr>:noh<cr>

"F9 for uncomment
vmap <F9> :s=^\(\/\*\)*==g<cr>:s=\(\*\/\)*$==g<cr>:noh<cr>
nmap <F9> :s=^\(\/\*\)*==g<cr>:s=\(\*\/\)*$==g<cr>:noh<cr>
imap <F9> <ESC>:s=^\(\/\*\)*==g<cr>:s=\(\*\/\)*$==g<cr>:noh<cr>


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"" => 常用配置
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" 将前缀键定义为逗号，默认为"\"
let mapleader = ";"

" 光标上下两侧最少保留的屏幕行数,缩写“so”
set scrolloff=7

" 搜索时忽略大小写
set ignorecase

" 高亮显示搜索结果
set hlsearch

" 设置格式化时制表符占用空格数
set shiftwidth=4
" 让 vim 把连续数量的空格视为一个制表符
set softtabstop=4
" 设置编辑时制表符占用空格数
set tabstop=4
"set smarttab

" 输入tab时自动将其转化为空格
set expandtab
"set noexpandtab

" Linux kernel code style
"set expandtab
set noexpandtab

" 在处理未保存或只读文件的时候，弹出确认
"set confirm

" 去掉输入错误的提示声音
set noeb

" 高亮显示当前行/列
set cursorline
"set cursorcolumn

" 开启行号显示
set nu

" 分割线显示
" color set: ColorColumn
set colorcolumn=80
" Make it obvious where 80 characters is
"set textwidth=110
"set colorcolumn=+1

" 允许在未保存的情况下切换缓冲区,方便跳转
set hidden 

" 将case 标记之后的语句放在标记缩进位置之后的 N 个字符处。(省缺'shiftwidth')。
set cinoptions=:N,lN,bN

" 文件备份与恢复
set nobackup
set nowb
set noswapfile

" 允许用指定语法高亮配色方案替换默认方案,文件$VIMRUNTIME/syntax
syntax on
" 开启文件类型侦测
filetype on
" 根据侦测到的不同类型加载对应的插件
" Enable filetype plugin
filetype plugin on
" 自适应不同语言的智能缩进
filetype indent on

" 外部更改文件时自动读取
set autoread

" 光标停留在上次打开的位置
autocmd BufReadPost * normal! g`"

" 关闭VIM内置补全的preview窗口
set completeopt-=preview

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"" => 快捷方式
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" 插入当前时间
iab xdate <c-r>=strftime("%Y/%m/%d %H:%M:%S")<cr>

" 以unix格式显示换行符
nmap xsm :e ++ff=unix
" 以dos格式显示换行符
nmap xsm :e ++ff=dos

" 删除多余空格
nmap ds :%s/\s\+$//<cr>
nmap db :g/^$/d<cr>

" 删除多余空行只留一个空行
nmap dh :g/^\s*$\n\s*$/d<cr>

" 删除行尾的一个^M
nmap dm :%s/\r\+$//e<cr>:set ff=unix<cr>

" 格式化
" XML
function XML()
    set filetype=xml
    :%s/></>\r</g   "把><替换成>回车<
    :normal gg=G<cr>
endfunction
nmap xml :call XML()<cr>

map json :%!python -m json.tool<cr>

" 二进制转十六进制
nmap 216 :%!xxd<cr>

" 快捷打印
map dk  oprintk("===> func: %s, line: %d\n", __func__, __LINE__);<Esc>
map df  oprintf("===> func: %s, line: %d\n", __func__, __LINE__);<Esc>
map dff oprintf("===> func: %s, line: %d, file: %s\n", __func__, __LINE__, __FILE__);<Esc>

" Ctrl + s保存文件
nmap <C-S> :update<cr>
vmap <C-S> <C-C>:update<cr>
imap <C-S> <C-O>:update<cr>

" 显示tab缩进指示线
" note: there is a space after the last \ above
map lt :set list listchars=tab:\┊\ <cr>

" 多编辑窗口切换
nmap ww <C-w><C-w>
" 上下窗口调整
nmap -- 5<C-w>-
nmap ++ 5<C-w>+
" 左右窗口调整
nmap >> 5<C-w>>
nmap << 5<C-w><


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"" => 文本编码
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set fencs=utf-8,ucs-bom,shift-jis,gb18030,gbk,gb2312,cp936
set termencoding=utf-8
set encoding=utf-8
set fileencodings=ucs-bom,utf-8,cp936
set fileencoding=utf-8


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"" => 插件管理  vundle 环境设置
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
filetype off
if has("win32")
	set rtp+=$VIM\vimfiles\bundle\Vundle.vim
else
	set rtp+=~/.vim/bundle/Vundle.vim
endif
" vundle 管理的插件列表必须位于 vundle#begin() 和 vundle#end() 之间

call vundle#begin()

Plugin 'VundleVim/Vundle.vim'
"Plugin 'altercation/vim-colors-solarized'
"Plugin 'tomasr/molokai'
Plugin 'Lokaltog/vim-powerline'
Plugin 'Yggdroot/indentLine'
Plugin 'scrooloose/nerdtree'
Plugin 'tpope/vim-fugitive'
Plugin 'majutsushi/tagbar'
Plugin 'vim-scripts/DoxygenToolkit.vim'
Plugin 'aklt/plantuml-syntax'
Plugin 'wannesm/wmgraphviz.vim'
Plugin 'iamcco/markdown-preview.vim'
Plugin 'mzlogin/vim-markdown-toc'
Plugin 'dhruvasagar/vim-table-mode'
Plugin 'Raimondi/delimitMate'
Plugin 'rkulla/pydiction'
Plugin 'fholgado/minibufexpl.vim'
Plugin 'Shougo/neocomplcache.vim'
Plugin 'msanders/snipmate.vim'
Plugin 'vim-utils/vim-man'
Plugin 'junegunn/vim-easy-align'
Plugin 'edkolev/tmuxline.vim'
Plugin 'vim-scripts/OmniCppComplete'
Plugin 'lfv89/vim-interestingwords'
Plugin 'zivyangll/git-blame.vim'

" 插件列表结束
call vundle#end()
filetype plugin indent on
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" 插件设置

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
">>>>>>>>vim-powerline
set guifont=PowerlineSymbols\ for\ Powerline
set nocompatible
set t_Co=256
let g:Powerline_symbols = 'unicode'
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

">>>>>>>>indentLine
"空格缩进指示线
let g:indentLine_enabled = 1
let g:indentLine_char_list = ['┊']
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

">>>>>>>>nerdtre
"树形目录
nmap <F4> :NERDTreeToggle<cr>
nmap ld :NERDTreeToggle<cr>
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

">>>>>>>>vim-fugitive
"显示：当前模式、Git分支、文件路径、文件是否保存以及当前所载行和 列的信息。这是通过vim-powerline来实现的。
set laststatus=2 " Always display the status line
set statusline+=%{fugitive#statusline()} "  Git Hotness
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

">>>>>>>>> Tagbar
let g:tagbar_width = 40
let g:tagbar_autofocus = 1
" 禁止首字母排序
let g:tagbar_sort = 0
nmap <F8> :TagbarToggle<CR>
nmap lf :TagbarToggle<CR>
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

">>>>>>>>DoxygenToolkit.vim
" Doxygen风格的注释
let g:DoxygenToolkit_commentType = "C"
let g:DoxygenToolkit_briefTag_pre="@brief  "
let g:DoxygenToolkit_paramTag_pre="@param "
let g:DoxygenToolkit_returnTag="@returns   "
let g:DoxygenToolkit_dateTag="@date "
let g:DoxygenToolkit_versionTag="@version "
let g:DoxygenToolkit_versionString="1.0"
let g:DoxygenToolkit_authorName="winddoing, winddoing@sina.cn"
let s:licenseTag = "Copyright(C)\<enter>"
let s:licenseTag = s:licenseTag . "For free\<enter>"
let s:licenseTag = s:licenseTag . "All right reserved\<enter>"
let g:DoxygenToolkit_licenseTag = s:licenseTag

let g:DoxygenToolkit_briefTag_funcName="yes"
let g:doxygen_enhanced_color=1

nmap <F2> :DoxAuthor<cr>/
nmap <F3> :Dox<cr>/
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

">>>>>>>>plantuml-syntax
"vim + plantuml
let g:plantuml_executable_script = 'java -jar ~/.vim/until/plantuml.jar'
nnoremap <silent> <F5> :w<CR> :make<CR>:copen<CR>
inoremap <silent> <F5> <Esc>:w<CR>:make<CR>:copen<CR>
vnoremap <silent> <F5> :<C-U>:w<CR>:make<CR>:copen<CR>
" Auto open
autocmd BufWritePost  *.uml :silent !eog %:p:r.png &
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

">>>>>>>>wmgraphviz.vim
" vim + dot
" Compiling: :GraphvizCompile, <LocalLeader>ll
" Viewing: :GraphvizShow, <LocalLeader>lv
" Interactive viewing + editing: :GraphvizInteractive, <LocalLeader>li
" 导出PDF: :GraphvizCompilePDF
autocmd BufWritePost *.dot :silent !dot -Tpng -o %<.png %
autocmd BufWritePost *.dot :silent !eog %:p:r.png &
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

">>>>>>>>markdown-preview.vim
" vim + makedown + firefox
let g:mkdp_path_to_chrome = "firefox"
" 设置 chrome 浏览器的路径（或是启动 chrome（或其他现代浏览器）的命令）
let g:mkdp_auto_start = 0
" 设置为 1 可以在打开 markdown 文件的时候自动打开浏览器预览，只在打开markdown 文件的时候打开一次
let g:mkdp_auto_open = 0
" 设置为 1 在编辑 markdown 的时候检查预览窗口是否已经打开，否则自动打开预览窗口
let g:mkdp_auto_close = 1
" 在切换 buffer 的时候自动关闭预览窗口，设置为 0 则在切换 buffer 的时候不自动关闭预览窗口
let g:mkdp_refresh_slow = 0
" 设置为 1 则只有在保存文件，或退出插入模式的时候更新预览，默认为 0，实时更新预览

"nmap <silent> <F8> <Plug>MarkdownPreview
"imap <silent> <F8> <Plug>MarkdownPreview
nmap M :MarkdownPreview <cr>
nmap <silent> <F10> <Plug>StopMarkdownPreview
imap <silent> <F10> <Plug>StopMarkdownPreview
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

">>>>>>>vim-markdown-toc
"生成文章目录
let g:vmt_auto_update_on_save = 1
"用于控制保存文件时是否自动更新已有文章目录，关闭为0
"let g:vmt_dont_insert_fence = 1
"关闭生成文章目录的时候会在前后插入 <!-- vim-markdown-toc -->
"使用命令：
":GenTocGFM  生成 GFM 链接风格的文章目录。
":GenTocRedcarpet  生成 Redcarpet 链接风格的文章目录。
":UpdateToc 更新已有目录
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

">>>>>>>vim-table-mode
"表格的排版
let g:table_mode_corner='|'
let g:table_mode_header_fillchar='-'
let g:table_mode_delimiter=' '
"先生成表格内容，用空格分隔, 使用命令:Tableize
vmap tt :Tableize <cr>
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

">>>>>>>>delimitMate
"自动补全引号(单引号/双引号/反引号), 括号(()[]{})]
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

">>>>>>>pydiction
"Python自动补全
let g:pydiction_location = '~/.vim/bundle/pydiction/complete-dict'
let g:pydiction_menu_height = 5
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

">>>>>>>>minibufexpl.vim
"打开多文件编辑
"下一个buf
nmap aa :bnext<cr>
"前一个buf
nmap zz :bprevious<cr>
":b<n>    n是数字，第n个buf
nmap bb :b
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

">>>>>>>>>>neocomplcache.vim
" 提示补全
let g:neocomplcache_enable_at_startup = 1
let g:neocomplcache_force_overwrite_completefunc = 1
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

">>>>>>>>>>snipmate.vim
" 自动补全代码块，如main+<Tab>
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

">>>>>>>>>vim-utils/vim-man
"vim中使用man 操作：Shift + k
" open man page for word under cursor in a vertical split
nmap K <Plug>(Vman)
" open man page for word under cursor in a horizontal split
"nmap K <Plug>(Man)
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

">>>>>>>>>vim-easy-align
" 对齐
" Start interactive EasyAlign in visual mode (e.g. vipga)
xmap ga <Plug>(EasyAlign)
" Start interactive EasyAlign for a motion/text object (e.g. gaip)
nmap ga <Plug>(EasyAlign)
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

">>>>>>>>>tmuxline.vim
"
let g:tmuxline_preset = {
			\'a'    : '#S',
			\'b'    : '#W',
			\'c'	  : ['#(whoami)'],
			\'win'  : ['#I', '#W'],
			\'cwin' : ['#I', '#W'],
			\'x'	  : ['CPU:[#(cat /proc/cpuinfo | grep "processor" | wc -l)]'],
			\'y'    : ['#(date +" %Y-%m-%d %H:%M")','%a'],
			\'z'    : '#H',
			\'options' : {'status-justify' : 'left'}}
let g:tmuxline_separators = {
			\ 'left' : '',
			\ 'left_alt': '>',
			\ 'right' : '',
			\ 'right_alt' : '<',
			\ 'space' : ' '}

let g:tmuxline_powerline_separators = 0
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

">>>>>>>>>>>>>OmniCppComplete
"C++补全
"ctags -R --c++-kinds=+pl --fields=+iaS --extra=+q
set tags+=~/.vim/tags/cpp_src/tags
nmap c++ :!ctags -R --c++-kinds=+pl --fields=+iaS --extra=+q --language-force=C++<cr>
let OmniCpp_MayCompleteDot = 1 " autocomplete with .
let OmniCpp_MayCompleteArrow = 1 " autocomplete with ->
let OmniCpp_MayCompleteScope = 1 " autocomplete with ::
let OmniCpp_SelectFirstItem = 2
let OmniCpp_NamespaceSearch = 2
let OmniCpp_ShowPrototypeInAbbr = 1
let OmniCpp_GlobalScopeSearch=1
let OmniCpp_DisplayMode=1
let OmniCpp_DefaultNamespaces=["std"]
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

">>>>>>>>>>>>>vim-interestingwords
"用不同颜色高亮感兴趣的单词
"Highlight with <Leader>k
"Navigate highlighted words with n and N
"Clear every word highlight with <Leader>kk throughout the buffer
nnoremap <silent> <leader>k :call InterestingWords('n')<cr>
nnoremap <silent> <leader>kk :call UncolorAllWords()<cr>

nnoremap <silent> n :call WordNavigation('forward')<cr>
nnoremap <silent> N :call WordNavigation('backward')<cr>

let g:interestingWordsRandomiseColors = 1
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

">>>>>>>>>>>>>git-blame.vim
"查看当前行代码的提交记录
nnoremap <Leader>g :<C-u>call gitblame#echo()<CR>
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"" => ctag配置
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set tags=./tags;,tags
set path+=include;


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"" => cscope配置
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" 添加cscope数据库到当前vim
if has("cscope")
    set csprg=/usr/bin/cscope " 指定用来执行cscope的命令
    set csto=1 " 设置cstag命令查找次序：0先找cscope数据库再找标签文件；1先找标签文件再找cscope数据库
    set cst " 同时搜索cscope数据库和标签文件
    set nocsverb
    if filereadable("cscope.out") " 若当前目录下存在cscope数据库，添加该数据库到vim
        cs add cscope.out
    endif
    set csverb
endif

" 查找本 C 符号
nmap css :cs find s <C-R>=expand("<cword>")<CR><CR>
" 查找本定义
nmap csg :cs find g <C-R>=expand("<cword>")<CR><CR>
" 查找本函数调用的函数
nmap csd :cs find d <C-R>=expand("<cword>")<CR><CR>
" 查找调用本函数的函数
nmap csc :cs find c <C-R>=expand("<cword>")<CR><CR>
" 查找本字符串
nmap cst :cs find t <C-R>=expand("<cword>")<CR><CR>
" 查找本 egrep 模式
nmap cse :cs find e <C-R>=expand("<cword>")<CR><CR>
" 查找本文件
nmap csf :cs find f <C-R>=expand("<cfile>")<CR><CR>
" 查找包含本文件的文件
nmap csi :cs find i ^<C-R>=expand("<cfile>")<CR>$<CR>

" Ctrl+o 回到原位置
" Ctrl+i 追踪之前跳转


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"" => 新建文件，自动插入文件头
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
au BufRead,BufNewFile *.dot set filetype=dot
au BufRead,BufNewFile *.uml set filetype=uml
autocmd BufNewFile *.dot,*.uml exec ":call SetTitle()"
""定义函数SetTitle，自动插入文件头
func SetTitle()
	if &filetype == 'dot'
		call setline(1,"//usr/bin/dot")
		call append(1,"digraph G{")
		call append(2,"")
		call append(3,"}")
		normal 3G
	endif
	if &filetype == 'uml'
		call setline(1,"@startuml")
		call append(1,"title xxxx")
		call append(2,"")
		call append(3,"@enduml")
		normal 3G
	endif
	"新建文件后，自动定位到文件末尾
	autocmd BufNewFile * normal G
endfunc


">>>>>> gvim configure
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
if has("win32")
    set guifont=Consolas:h12:cANSI

    let g:tagbar_ctags_bin='$VIM\vimfiles\tags\win_ctags\ctags.exe'

    "在终端启动vim时，共享NERDTree
    let g:nerdtree_tabs_open_on_console_startup=1
    "开启vim时默认打开
    autocmd VimEnter * NERDTree
    wincmd w
    autocmd VimEnter * wincmd w
    "关闭最后一个文件时，自动关闭NERDTree
    autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
    " 设置宽度
    let NERDTreeWinSize=20

    "使能后，Ctrl+v VISUAL块模式与粘贴功能冲突
    "source $VIMRUNTIME/mswin.vim
endif
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
